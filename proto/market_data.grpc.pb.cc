// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: market_data.proto

#include "market_data.pb.h"
#include "market_data.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace marketdata {

static const char* MarketDataStreamer_method_names[] = {
  "/marketdata.MarketDataStreamer/StreamPrices",
  "/marketdata.MarketDataStreamer/SendPrice",
};

std::unique_ptr< MarketDataStreamer::Stub> MarketDataStreamer::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< MarketDataStreamer::Stub> stub(new MarketDataStreamer::Stub(channel, options));
  return stub;
}

MarketDataStreamer::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_StreamPrices_(MarketDataStreamer_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_SendPrice_(MarketDataStreamer_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::ClientReader< ::marketdata::PriceUpdate>* MarketDataStreamer::Stub::StreamPricesRaw(::grpc::ClientContext* context, const ::marketdata::PriceRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::marketdata::PriceUpdate>::Create(channel_.get(), rpcmethod_StreamPrices_, context, request);
}

void MarketDataStreamer::Stub::async::StreamPrices(::grpc::ClientContext* context, const ::marketdata::PriceRequest* request, ::grpc::ClientReadReactor< ::marketdata::PriceUpdate>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::marketdata::PriceUpdate>::Create(stub_->channel_.get(), stub_->rpcmethod_StreamPrices_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::marketdata::PriceUpdate>* MarketDataStreamer::Stub::AsyncStreamPricesRaw(::grpc::ClientContext* context, const ::marketdata::PriceRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::marketdata::PriceUpdate>::Create(channel_.get(), cq, rpcmethod_StreamPrices_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::marketdata::PriceUpdate>* MarketDataStreamer::Stub::PrepareAsyncStreamPricesRaw(::grpc::ClientContext* context, const ::marketdata::PriceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::marketdata::PriceUpdate>::Create(channel_.get(), cq, rpcmethod_StreamPrices_, context, request, false, nullptr);
}

::grpc::Status MarketDataStreamer::Stub::SendPrice(::grpc::ClientContext* context, const ::marketdata::PriceUpdate& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::marketdata::PriceUpdate, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendPrice_, context, request, response);
}

void MarketDataStreamer::Stub::async::SendPrice(::grpc::ClientContext* context, const ::marketdata::PriceUpdate* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::marketdata::PriceUpdate, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendPrice_, context, request, response, std::move(f));
}

void MarketDataStreamer::Stub::async::SendPrice(::grpc::ClientContext* context, const ::marketdata::PriceUpdate* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendPrice_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* MarketDataStreamer::Stub::PrepareAsyncSendPriceRaw(::grpc::ClientContext* context, const ::marketdata::PriceUpdate& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::marketdata::PriceUpdate, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendPrice_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* MarketDataStreamer::Stub::AsyncSendPriceRaw(::grpc::ClientContext* context, const ::marketdata::PriceUpdate& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendPriceRaw(context, request, cq);
  result->StartCall();
  return result;
}

MarketDataStreamer::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MarketDataStreamer_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< MarketDataStreamer::Service, ::marketdata::PriceRequest, ::marketdata::PriceUpdate>(
          [](MarketDataStreamer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::marketdata::PriceRequest* req,
             ::grpc::ServerWriter<::marketdata::PriceUpdate>* writer) {
               return service->StreamPrices(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MarketDataStreamer_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MarketDataStreamer::Service, ::marketdata::PriceUpdate, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MarketDataStreamer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::marketdata::PriceUpdate* req,
             ::google::protobuf::Empty* resp) {
               return service->SendPrice(ctx, req, resp);
             }, this)));
}

MarketDataStreamer::Service::~Service() {
}

::grpc::Status MarketDataStreamer::Service::StreamPrices(::grpc::ServerContext* context, const ::marketdata::PriceRequest* request, ::grpc::ServerWriter< ::marketdata::PriceUpdate>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MarketDataStreamer::Service::SendPrice(::grpc::ServerContext* context, const ::marketdata::PriceUpdate* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace marketdata

